@inject IJSRuntime js

<h1>@Titulo</h1>

<table class="table">
    <thead>
        <tr>
            <th>Ação</th>
            <th>Data</th>
            <th>Descrição</th>
            <th>Concluida</th>
        </tr>
    </thead>
    <tbody>
        <ListaGenerica ListaItem="tarefas">
            <Lista Context="tarefa">
                <tr>
                    <TarefaIndividual item="tarefa" RemoverTarefa="RemoveTarefa" />
                </tr>
            </Lista>
        </ListaGenerica>
    </tbody>
</table>


@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="Text" placeholder="Informe a tarefas" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}


@code {

    [Parameter] public List<Tarefa> tarefas { get; set; }
    [Parameter] public string Titulo { get; set; }
    private string novaTarefa = "";

    async void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });
            novaTarefa = string.Empty;
            totalTarefas = tarefas.Count();
            //await js.InvokeVoidAsync("getTotalTarefas");
            await js.InvokeAsync<int>("getTotalTarefasInstancia", DotNetObjectReference.Create(this));
        }
    }

    static int totalTarefas = 0;
    [JSInvokable]
    public static Task<int> ObterTotalTarefas()
    {
        return Task.FromResult(totalTarefas);
    }


    [JSInvokable]
    public Task<int> ObterTotalTarefasInstancia()
    {
        return Task.FromResult(totalTarefas);
    }

    @* private async Task RemoveTarefa(Tarefa tarefa)
        {
        // tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
        var resultado = await js.InvokeAsync<bool>("confirm","Excluir Tarefa?");
        if (resultado)
        {
        tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
        //await js.InvokeVoidAsync("alert","Tarefa excluida com sucesso");
        await js.InvokeAsync<object>("MostraAlerta", "Ok, Tarefa excluida !!!");
        }
        } *@

    private void RemoveTarefa(Tarefa tarefa)
    {
        // tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
        // var resultado = await js.InvokeAsync<bool>("confirm","Excluir Tarefa?");
        var resultado = ((IJSInProcessRuntime)js).Invoke<bool>("confirm", "Excluir esta tarefa?");
        if (resultado)
        {
            tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));
            //await js.InvokeVoidAsync("alert","Tarefa excluida com sucesso");
            //await js.InvokeAsync<object>("MostraAlerta", "Ok, Tarefa excluida !!!");
        }
    }
}
